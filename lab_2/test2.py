from main import bin_poick
import unittest

class TestMySolution(unittest.TestCase):

    def test0(self):        # вводный тест
        self.assertEqual(bin_poick(13,[25,22,43,57,86,13,72,38,54,10]),('Num =', 13, 'Time =', 1))

    def test11(self):        # вводный тест
        self.assertEqual(bin_poick(100,[25,22,43,57,86,13,72,38,54,10]),'None')

    def test1(self):  # проверка все ли переменные целочисленные
        self.assertEqual(bin_poick(13,[25,'c',43,57,86,'n',72,38,54,10]), "не верный тип данных")
        # исправляем ошибку проверкой каждого элемента nums на целочисленность; показываем пользователю его ошибку

    def test2(self):  # проверка все ли переменные целочисленные
        self.assertEqual(bin_poick(13,[25.333,22.333,43.3,57.3,86,13,72,38,54,10]), "не верный тип данных")
        # исправляем ошибку проверкой каждого элемента nums на целочисленность; показываем пользователю его ошибку

    def test3(self):  # проверка все ли переменные целочисленные
        self.assertEqual(bin_poick(13,[True,22,43,57,False,13,72,38,54,10]), "не верный тип данных")

    # исправляем ошибку проверкой каждого элемента nums на целочисленность; показываем пользователю его ошибку

    def test4(self):  # проверка все ли переменные целочисленные
        self.assertEqual(bin_poick(13,[25,'two',43,57,86,13,72,38,54,10]), "не верный тип данных")

    # исправляем ошибку проверкой каждого элемента nums на целочисленность; показываем пользователю его ошибку

    def test5(self):  # проверка все ли переменные целочисленные
        self.assertEqual(bin_poick(13,[25,[22],[43],57,86,13,72,38,54,10]), 'не верный тип данных')

    # исправляем ошибку проверкой каждого элемента nums на целочисленность; показываем пользователю его ошибку

    def test6(self):  # проверка есть ли массив
        self.assertEqual(bin_poick(13,(25,22,43,57,86,13,72,38,54,10)), "нет массива")

    # исправляем ошибку проверкой является ли переменная nums массивом

    def test7(self):  # проверка количества элементов
        self.assertEqual(bin_poick(13,[25]), "не верное количество элементов")

    # исправляем ошибку проверкой, что количество элементов массива nums >=2

    def test8(self):  # проверка целочисленный ли переменная target
        self.assertEqual(bin_poick('five',[25,22,43,57,86,13,72,38,54,10]), "не верный тип данных")

    # исправляем ошибку проверкой переменной target на целочисленность

    def test9(self):  # проверка целочисленный ли переменная target
        self.assertEqual(bin_poick([13],[25,22,43,57,86,13,72,38,54,10]), "не верный тип данных")

    # исправляем ошибку проверкой переменной target на целочисленность

    def test10(self):  # проверка целочисленный ли переменная target
        self.assertEqual(bin_poick(13.444,[25,22,43,57,86,13,72,38,54,10]), "не верный тип данных")
    # исправляем ошибку проверкой переменной target на целочисленность

if __name__=='__main__':
    unittest.main()